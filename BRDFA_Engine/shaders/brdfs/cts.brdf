#define PI 3.14159265359


float reitz_distribution_GGX(vec3 N, vec3 H, float a)
{
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float nom    = a2;
    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
    denom        = PI * denom * denom;
	
    return nom / denom;
}


float schlick_geometry_GGX(vec3 N, vec3 V, float k)
{
    float NdotV = max(dot(N, V), 0.0);
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}

float smith_schlick_geometry(vec3 N, vec3 V, vec3 L, float k)
{
    return schlick_geometry_GGX(N,V,k) *  schlick_geometry_GGX(N,L,k);
}

vec3 schlick_frasnel(vec3 N, vec3 V, vec3 F0)
{   
    return F0 + (1.0 - F0) * pow(1.0 - dot(N,V), 5.0);
}


vec3 render(vec3 L, vec3 N, vec3 V, vec2 textureCord, mat3 worldToLocal){
	float k = iParameter0*iParameter0/2.; // Used in Geometric_Attenuation function.
	vec3 k_d = texture(iTexture0, textureCord).rgb;

    vec3 H = normalize(L+V);
    vec3 PLASTIC_SPECULAR_COLOR =  vec3(0.25, 0.25, 0.25);
    vec3 F = schlick_frasnel(N, V, PLASTIC_SPECULAR_COLOR);
    float D = reitz_distribution_GGX(N, H, iParameter0);
    float G = smith_schlick_geometry(N, V, H, k);
	
	vec3 L_r = reflect(-V, N);
    vec3 specular = F*D*G/(4.* dot(L,N)*dot(V,N));
    vec3 diffuse = vec3(k_d)*1./PI; 

	vec3 envC = texture(skybox, L).rgb;
    return envC*(diffuse + specular)*dot(V,N);//(diffuse + specular);
}
